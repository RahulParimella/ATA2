package com.example.ata.controller;

import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.ata.dto.BookingDto;
import com.example.ata.service.BookingService;

@RestController
@RequestMapping("/api")
public class BookingController {

	@Autowired
	private BookingService bookingService;

	@Autowired
	private ModelMapper modelMapper;

	@PostMapping("/customer")
	public BookingDto insertCustomer(@RequestBody BookingDto bookingDto) {
		return bookingService.saveBooking(bookingDto);

	}

	@PutMapping("/updatecustomer/{customerId}")
	public ResponseEntity<String> updateCustomer(@PathVariable("customerId") int customerId,
			@RequestBody CustomerDto customerDto) {
		String result = customerService.updateCustomer(customerId, customerDto);
		return ResponseEntity.ok(result);
	}

	@DeleteMapping("/deletecustomer/{customerId}")
	public ResponseEntity<String> deleteCustomer(@PathVariable int customerId) {
		return ResponseEntity.ok(customerService.deleteCustomer(customerId));

	}

	@GetMapping("/viewallcustomers")
	// Type1
	public ResponseEntity<List<CustomerDto>> viewCustomers() {

		return ResponseEntity.ok(customerService.viewCustomers().stream()
				.map(customer -> modelMapper.map(customer, CustomerDto.class)).collect(Collectors.toList()));
	}

	@GetMapping("/viewcustomer/{customerId}")
	public ResponseEntity<CustomerDto> viewCustomerById(@PathVariable int customerId) {
		if (isValidCustomerId(customerId)) {
			return ResponseEntity.ok(customerService.viewCustomerById(customerId));
		} else {
			return ResponseEntity.badRequest().build(); // You can customize the response accordingly

		}

	}

	private boolean isValidCustomerId(int customerId) {
		// Add your validation logic here
		// For example, check if customerId is positive or some other condition
		return customerId > 0;
	}

