package com.example.apigateway.util;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.bouncycastle.jcajce.BCFKSLoadStoreParameter.SignatureAlgorithm;
import org.springframework.security.core.userdetails.UserDetails;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

public class JwtUtil {
	 // Method to generate a JWT token for a given username
    public String generateToken(String username) {
        Map<String, Object> claims = new HashMap<>();
        return "token:"+createToken(claims, username);
    }

    // Private method to create a JWT token
    private String createToken(Map<String, Object> claims, String username) {
        return Jwts.builder()
                .setClaims(claims)
                .setSubject(username)
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60))
                .signWith(getSecKey(), SignatureAlgorithm.HS256).compact();
    }

    // Private method to get the secret key for signing the JWT
    private Key getSecKey() {
        byte[] keybytes = Decoders.BASE64.decode("3273357638792F423F4528482B4D6251655368566D597133743677397A244326");
        return Keys.hmacShaKeyFor(keybytes);
    }

   

    // Method to validate a JWT token against a UserDetails object
    public Boolean validateToken(String token, UserDetails userDetails) {
        final String username = extractUsername(token);
        return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
    }

    

}
